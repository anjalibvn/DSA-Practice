int paths(int i, int j, vector<vector<int> > &mat, int n, int m, vector<vector<int>> &memo){

    // Base case of first cell.
    if(i == 0 and j == 0){
        return 1;
    }
    // If the cell is onvalid return 0.
    if(i < 0 || j < 0 || j >= m || i >= n || mat[i][j] == -1){
        return 0;
    }
    // If already calculated retrn immediately.
    if(memo[i][j] != -1){
        return memo[i][j];
    }
    int mod = 1e9 + 7;

    // Recursively call the function for previous cells and store it in memo table.
    memo[i][j] = (paths(i - 1, j, mat, n, m, memo) + paths(i, j - 1, mat, n, m, memo)) % mod;
    return memo[i][j];
}

int mazeObstacles(int n, int m, vector< vector< int> > &mat) {
    // Write your code here
    vector< vector<int> > memo(n, vector<int>(m, -1));
    return paths(n - 1, m - 1, mat, n, m, memo);  
}
