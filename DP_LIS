#include<bits/stdc++.h>
int f(int ind,int prev_ind,int a[],int n,vector<vector<int>>&dp){
    if(ind==n) return 0;
    if(dp[ind][prev_ind+1]!=-1) return dp[ind][prev_ind+1];
    int ntake=0+f(ind+1,prev_ind,a,n,dp);
    int take=0;
    if(prev_ind==-1||a[ind]>a[prev_ind])
     take=1+f(ind+1,ind,a,n,dp);
     return dp[ind][prev_ind+1]=max(take,ntake);
}

int longestIncreasingSubsequence(int arr[], int n)
{
    // Write Your Code here
    vector<vector<int>>dp(n,vector<int>(n+1,-1));
    return f(0,-1,arr,n,dp);

}
